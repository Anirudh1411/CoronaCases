{"version":3,"sources":["favicon.png","components/Card/Card.component.jsx","components/Selector/Selector.component.jsx","BaseURL.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","type","value","lastUpdate","caption","Date","toDateString","className","start","end","separator","Selector","handleCountryChange","countries","id","onChange","defaultValue","map","country","index","key","App","useState","currentCountry","data","setData","useEffect","a","extend","axios","get","URL","response","allData","previousData","confirmed","recovered","deaths","dailyData","d","total","date","reportDate","name","getData","getCountry","Caption","src","require","alt","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4a19100.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favicon.12701290.png\";","import React from \"react\";\r\nimport CountUp from \"react-countup\";\r\n\r\nimport \"./Card.styles.css\";\r\n\r\nconst Card = ({ type, value, lastUpdate, caption }) => {\r\n  lastUpdate = new Date(lastUpdate).toDateString();\r\n\r\n  return (\r\n    <div className={`card ${type}`}>\r\n      <h2>{type}</h2>\r\n      <p> <strong>{value ? <CountUp start={0} end={value} separator=\",\" /> : null}</strong></p>\r\n      <span className=\"last-update\">\r\n      <p>{lastUpdate}</p>\r\n      </span>\r\n      \r\n      <span className=\"caption\">\r\n        <p>{caption}</p>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport \"./Selector.styles.css\";\r\n\r\nconst Selector = ({ handleCountryChange, countries }) => {\r\n  return (\r\n    <div className=\"selector\">\r\n      <select id=\"select\" onChange={handleCountryChange} defaultValue=\"\">\r\n        <option value=\"global\">Global</option>\r\n\r\n        {countries\r\n          ? countries.map((country, index) => (\r\n              <option value={country} key={index}>\r\n                {country}\r\n              </option>\r\n            ))\r\n          : null}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Selector;\r\n","export default \"https://covid19.mathdro.id/api\";\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Card from \"./components/Card/Card.component.jsx\";\r\nimport Selector from \"./components/Selector/Selector.component.jsx\";\r\nimport URL from \"./BaseURL\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [data, setData] = useState({ currentCountry: \"global\" });\r\n  useEffect(() => {\r\n    async function getData() {\r\n      let extend;\r\n      if (!data.currentCountry || data.currentCountry === \"global\") extend = \"\";\r\n      else extend = `countries/${data.currentCountry}`;\r\n      const response = await axios.get(`${URL}/${extend}`);\r\n      const allData = response.data;\r\n\r\n      setData((previousData) => {\r\n        return {\r\n          ...previousData,\r\n          confirmed: allData.confirmed.value,\r\n          recovered: allData.recovered.value,\r\n          deaths: allData.deaths.value,\r\n          lastUpdate: allData.lastUpdate,\r\n        };\r\n      });\r\n    }\r\n    async function dailyData() {\r\n      const response = await axios.get(`${URL}/daily`);\r\n      const dailyData = response.data.map((d) => ({\r\n        confirmed: d.confirmed.total,\r\n        deaths: d.deaths.total,\r\n        date: d.reportDate,\r\n      }));\r\n      setData((previousData) => {\r\n        return {\r\n          ...previousData,\r\n          dailyData,\r\n        };\r\n      });\r\n    }\r\n    async function getCountry() {\r\n      const response = await axios.get(`${URL}/countries`);\r\n      const data = response.data.countries.map(({ name }) => name);\r\n      setData((previousData) => {\r\n        return {\r\n          ...previousData,\r\n          countries: data,\r\n        };\r\n      });\r\n    }\r\n\r\n    getData();\r\n    dailyData();\r\n    getCountry();\r\n  }, [data.currentCountry]);\r\n  const Caption = {\r\n    confirmed: \"Number of Active Cases of COVID-19\",\r\n    recovered: \"Number of Recoveries from COVID-19\",\r\n    deaths: \"Number of Deaths Caused by COVID-19\",\r\n  };\r\n\r\n  const handleCountryChange = (event) => {\r\n    const value = event.target.value || null;\r\n    setData((previousData) => {\r\n      return {\r\n        ...previousData,\r\n        currentCountry: value,\r\n      };\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header\">\r\n        <h1>\r\n          C<img src={require(\"./favicon.png\")} alt=\"logo\" />\r\n          VID-19 TRACKER\r\n        </h1>\r\n      </div>\r\n      <div className=\"body\">\r\n        <Card\r\n          type=\"confirmed\"\r\n          value={data.confirmed}\r\n          lastUpdate={data.lastUpdate}\r\n          caption={Caption.confirmed}\r\n        />\r\n        <Card\r\n          type=\"recovered\"\r\n          value={data.recovered}\r\n          lastUpdate={data.lastUpdate}\r\n          caption={Caption.recovered}\r\n        />\r\n        <Card\r\n          type=\"deaths\"\r\n          value={data.deaths}\r\n          lastUpdate={data.lastUpdate}\r\n          caption={Caption.deaths}\r\n        />\r\n      </div>\r\n      <div className=\"selector\">\r\n        <Selector\r\n          handleCountryChange={handleCountryChange}\r\n          countries={data.countries}\r\n        />\r\n      </div>\r\n      <div className=\"footer\">\r\n        <p>\r\n          CREATED BY ANIRUDH\r\n        \r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}